#!/usr/bin/env python3
"""
Standardizes string fields of the NDJSON record from stdin and outputs the
modified record to stdout.
"""
import argparse
import json
import re
from sys import stdin, stdout
from typing import Optional, Set, Union


def titlecase(text: Union[str, None], articles: Set[str] = {}, abbreviations: Set[str] = {}) -> Optional[str]:
    """
    Originally from nextstrain/ncov-ingest

    Returns a title cased location name from the given location name
    *tokens*. Ensures that no tokens contained in the *whitelist_tokens* are
    converted to title case.

    >>> articles = {'a', 'and', 'of', 'the', 'le'}
    >>> abbreviations = {'USA', 'DC'}

    >>> titlecase("the night OF THE LIVING DEAD", articles)
    'The Night of the Living Dead'

    >>> titlecase("BRAINE-LE-COMTE, FRANCE", articles)
    'Braine-le-Comte, France'

    >>> titlecase("auvergne-RHÔNE-alpes", articles)
    'Auvergne-Rhône-Alpes'

    >>> titlecase("washington DC, usa", articles, abbreviations)
    'Washington DC, USA'
    """
    if not isinstance(text, str):
        return

    words = enumerate(re.split(r'\b', text))

    def changecase(index, word):
        casefold = word.casefold()
        upper = word.upper()

        if upper in abbreviations:
            return upper
        elif casefold in articles and index != 1:
            return word.lower()
        else:
            return word.title()

    return ''.join(changecase(i, w) for i, w in words)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("--titlecase-fields", nargs="*",
        help="List of fields to convert to titlecase.")
    parser.add_argument("--articles", nargs="*",
        help="List of articles that should not be cast to titlecase.")
    parser.add_argument("--abbreviations", nargs="*",
        help="List of abbreviations that should not be cast to titlecase, keeps uppercase.")


    args = parser.parse_args()

    if args.articles:
        articles = set(args.articles)

    if args.abbreviations:
        abbreviations = set(args.abbreviations)

    for record in stdin:
        record = json.loads(record)

        if args.titlecase_fields:
            for field in args.titlecase_fields:
                record[field] = titlecase(record.get(field, ""), articles, abbreviations)

        json.dump(record, stdout, allow_nan=False, indent=None, separators=',:')
        print()
